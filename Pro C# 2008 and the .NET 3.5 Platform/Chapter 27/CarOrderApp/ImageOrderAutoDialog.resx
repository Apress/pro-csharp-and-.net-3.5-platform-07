<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AwACAAAAAAAAAD0BAwABAAAAAQAAAAAAAAA=
</value>
  </data>
</root>